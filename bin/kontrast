#!/usr/bin/env ruby
begin
    require "rubygems"
    require "kontrast"
rescue LoadError => e
    puts "Could not load Kontrast."
    raise e
end
require "thor"

module Kontrast
    class CLI < Thor
        class_option :config

        desc "run_tests --config CONFIG_FILE", "Run Kontrast test suite"
        def run_tests
            load_config(options[:config])
            Kontrast.run
        end

        desc "make_gallery --config CONFIG_FILE --result-path PATH", "Create gallery given a path of test results"
        option :result_path
        def make_gallery
            load_config(options[:config])

            # We're only allowed to give no path in the remote case
            if options[:result_path].nil? && !Kontrast.configuration.remote
                raise GalleryException.new("You can't omit --result-path when running in local mode.")
            end

            Kontrast.make_gallery(options[:result_path])
        end

        desc "local_run --config CONFIG_FILE", "Run Kontrast locally"
        def local_run
            load_config(options[:config])

            # Run Kontrast
            Kontrast.run
            Kontrast.make_gallery(Kontrast.path)

            # Print the gallery path
            puts "Kontrast is all done!"
            puts "You can find the gallery at: #{Kontrast.path}/gallery/gallery.html"
        end

        private
            def load_config(config)
                begin
                    require config
                rescue LoadError => e
                    raise ConfigurationException.new("Could not load the given config file.")
                rescue TypeError => e
                    raise ConfigurationException.new("Config file argument must be a string.")
                rescue Exception => e
                    raise ConfigurationException.new("An unexpected error occurred while trying to load the given config file: #{e.inspect}")
                end

                # Check that we actually got a configuration block
                if !Kontrast.configuration
                    raise ConfigurationException.new("No configuration was found in the given file.")
                end

                # Make sure we have the bare minimum configuration to continue
                Kontrast.configuration.validate

                return true
            end
    end
end

Kontrast::CLI.start(ARGV)
